existT : forall [A : Type] (P : A -> Type) (x : A), P x -> {x : A & P x}

existT is template universe polymorphic on sigT.u0 sigT.u1
Arguments existT [A]%type_scope _%function_scope
Expands to: Constructor Coq.Init.Specif.existT
Inductive sigT (A : Type) (P : A -> Type) : Type :=
    existT : forall x : A, P x -> {x : A & P x}

Arguments sigT [A]%type_scope _%type_scope
Arguments existT [A]%type_scope _%function_scope
existT : forall [A : Type] (P : A -> Type) (x : A), P x -> {x : A & P x}

Argument A is implicit
Inductive eq (A : Type) (x : A) : A -> Prop :=  eq_refl : x = x

Arguments eq {A}%type_scope
Arguments eq_refl {A}%type_scope {x}, [A] _
eq_refl : forall {A : Type} {x : A}, x = x

eq_refl is not universe polymorphic
Arguments eq_refl {A}%type_scope {x}, [A] _
Expands to: Constructor Coq.Init.Logic.eq_refl
eq_refl : forall {A : Type} {x : A}, x = x

When applied to no arguments:
  Arguments A, x are implicit and maximally inserted
When applied to 1 argument:
  Argument A is implicit
Nat.add = 
fix add (n m : nat) {struct n} : nat :=
  match n with
  | 0 => m
  | S p => S (add p m)
  end
     : nat -> nat -> nat

Arguments Nat.add (_ _)%nat_scope
Nat.add : nat -> nat -> nat

Nat.add is not universe polymorphic
Arguments Nat.add (_ _)%nat_scope
Nat.add is transparent
Expands to: Constant Coq.Init.Nat.add
Nat.add : nat -> nat -> nat

plus_n_O : forall n : nat, n = n + 0

plus_n_O is not universe polymorphic
Arguments plus_n_O _%nat_scope
plus_n_O is opaque
Expands to: Constant Coq.Init.Peano.plus_n_O
Inductive le (n : nat) : nat -> Prop :=
    le_n : n <= n | le_S : forall m : nat, n <= m -> n <= S m

Arguments le (_ _)%nat_scope
Arguments le_n _%nat_scope
Arguments le_S {n}%nat_scope [m]%nat_scope
comparison : Set

comparison is not universe polymorphic
Expands to: Inductive Coq.Init.Datatypes.comparison
Inductive comparison : Set :=
    Eq : comparison | Lt : comparison | Gt : comparison
bar : foo

bar is not universe polymorphic
Expanded type for implicit arguments
bar : forall {x : nat}, x = 0

Arguments bar {x}
Expands to: Constant PrintInfos.bar
*** [ bar : foo ]

Expanded type for implicit arguments
bar : forall {x : nat}, x = 0

Arguments bar {x}
Module Coq.Init.Peano
Notation sym_eq := eq_sym
Expands to: Notation Coq.Init.Logic.sym_eq
Inductive eq (A : Type) (x : A) : A -> Prop :=  eq_refl : x = x

Arguments eq {A}%type_scope
Arguments eq_refl {A}%type_scope {x}, {A} _
n:nat

Hypothesis of the goal context.
h:(n <> newdef n)

Hypothesis of the goal context.
g:(nat -> nat)

Constant (let in) of the goal context.
h:(n <> newdef n)

Hypothesis of the goal context.
